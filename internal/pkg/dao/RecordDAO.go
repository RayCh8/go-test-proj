// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dao "github.com/AmazingTalker/go-amazing/pkg/dao"
	daokit "github.com/AmazingTalker/go-rpc-kit/daokit"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// RecordDAO is an autogenerated mock type for the RecordDAO type
type RecordDAO struct {
	mock.Mock
}

// CreateRecord provides a mock function with given fields: _a0, _a1, _a2
func (_m *RecordDAO) CreateRecord(_a0 context.Context, _a1 *dao.Record, _a2 ...daokit.Enrich) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dao.Record, ...daokit.Enrich) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecord provides a mock function with given fields: _a0, _a1
func (_m *RecordDAO) GetRecord(_a0 context.Context, _a1 string) (*dao.Record, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dao.Record
	if rf, ok := ret.Get(0).(func(context.Context, string) *dao.Record); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecords provides a mock function with given fields: _a0, _a1
func (_m *RecordDAO) ListRecords(_a0 context.Context, _a1 dao.ListRecordsOpt) ([]dao.Record, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []dao.Record
	if rf, ok := ret.Get(0).(func(context.Context, dao.ListRecordsOpt) []dao.Record); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dao.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dao.ListRecordsOpt) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRecordDAO creates a new instance of RecordDAO. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRecordDAO(t testing.TB) *RecordDAO {
	mock := &RecordDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
