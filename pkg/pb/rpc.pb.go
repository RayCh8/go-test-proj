// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/pb/rpc.proto

package pb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	_ "github.com/AmazingTalker/protoc-gen-svc/utils"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Record struct {
	ID        string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TheNum    int64      `protobuf:"varint,2,opt,name=the_num,json=theNum,proto3" json:"theNum"`
	TheStr    string     `protobuf:"bytes,3,opt,name=the_str,json=theStr,proto3" json:"theStr"`
	CreatedAt *time.Time `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3,stdtime,wktptr" json:"createdAt"`
	UpdatedAt *time.Time `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3,stdtime,wktptr" json:"updatedAt"`
}

func (m *Record) Reset()      { *m = Record{} }
func (*Record) ProtoMessage() {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{0}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Record) GetTheNum() int64 {
	if m != nil {
		return m.TheNum
	}
	return 0
}

func (m *Record) GetTheStr() string {
	if m != nil {
		return m.TheStr
	}
	return ""
}

func (m *Record) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Record) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type HealthReq struct {
}

func (m *HealthReq) Reset()      { *m = HealthReq{} }
func (*HealthReq) ProtoMessage() {}
func (*HealthReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{1}
}
func (m *HealthReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthReq.Merge(m, src)
}
func (m *HealthReq) XXX_Size() int {
	return m.Size()
}
func (m *HealthReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthReq.DiscardUnknown(m)
}

var xxx_messageInfo_HealthReq proto.InternalMessageInfo

type HealthRes struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *HealthRes) Reset()      { *m = HealthRes{} }
func (*HealthRes) ProtoMessage() {}
func (*HealthRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{2}
}
func (m *HealthRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthRes.Merge(m, src)
}
func (m *HealthRes) XXX_Size() int {
	return m.Size()
}
func (m *HealthRes) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthRes.DiscardUnknown(m)
}

var xxx_messageInfo_HealthRes proto.InternalMessageInfo

func (m *HealthRes) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type ConfigReq struct {
}

func (m *ConfigReq) Reset()      { *m = ConfigReq{} }
func (*ConfigReq) ProtoMessage() {}
func (*ConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{3}
}
func (m *ConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigReq.Merge(m, src)
}
func (m *ConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *ConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigReq proto.InternalMessageInfo

type ConfigRes struct {
	Enable bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Num    int64  `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	Str    string `protobuf:"bytes,3,opt,name=str,proto3" json:"str,omitempty"`
}

func (m *ConfigRes) Reset()      { *m = ConfigRes{} }
func (*ConfigRes) ProtoMessage() {}
func (*ConfigRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{4}
}
func (m *ConfigRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigRes.Merge(m, src)
}
func (m *ConfigRes) XXX_Size() int {
	return m.Size()
}
func (m *ConfigRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigRes.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigRes proto.InternalMessageInfo

func (m *ConfigRes) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *ConfigRes) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *ConfigRes) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

type CreateRecordReq struct {
	TheNum    int64      `protobuf:"varint,1,opt,name=the_num,json=theNum,proto3" json:"theNum"`
	TheStr    string     `protobuf:"bytes,2,opt,name=the_str,json=theStr,proto3" json:"theStr"`
	CreatedAt *time.Time `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3,stdtime,wktptr" json:"createdAt"`
}

func (m *CreateRecordReq) Reset()      { *m = CreateRecordReq{} }
func (*CreateRecordReq) ProtoMessage() {}
func (*CreateRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{5}
}
func (m *CreateRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRecordReq.Merge(m, src)
}
func (m *CreateRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRecordReq proto.InternalMessageInfo

func (m *CreateRecordReq) GetTheNum() int64 {
	if m != nil {
		return m.TheNum
	}
	return 0
}

func (m *CreateRecordReq) GetTheStr() string {
	if m != nil {
		return m.TheStr
	}
	return ""
}

func (m *CreateRecordReq) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type CreateRecordRes struct {
	Record *Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *CreateRecordRes) Reset()      { *m = CreateRecordRes{} }
func (*CreateRecordRes) ProtoMessage() {}
func (*CreateRecordRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{6}
}
func (m *CreateRecordRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRecordRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRecordRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRecordRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRecordRes.Merge(m, src)
}
func (m *CreateRecordRes) XXX_Size() int {
	return m.Size()
}
func (m *CreateRecordRes) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRecordRes.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRecordRes proto.InternalMessageInfo

func (m *CreateRecordRes) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type GetRecordReq struct {
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (m *GetRecordReq) Reset()      { *m = GetRecordReq{} }
func (*GetRecordReq) ProtoMessage() {}
func (*GetRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{7}
}
func (m *GetRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRecordReq.Merge(m, src)
}
func (m *GetRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *GetRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRecordReq proto.InternalMessageInfo

func (m *GetRecordReq) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type GetRecordRes struct {
	Record *Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *GetRecordRes) Reset()      { *m = GetRecordRes{} }
func (*GetRecordRes) ProtoMessage() {}
func (*GetRecordRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{8}
}
func (m *GetRecordRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRecordRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRecordRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRecordRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRecordRes.Merge(m, src)
}
func (m *GetRecordRes) XXX_Size() int {
	return m.Size()
}
func (m *GetRecordRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRecordRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetRecordRes proto.InternalMessageInfo

func (m *GetRecordRes) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type ListRecordReq struct {
	// keys from url queryString or url params is always type of string.
	PageSize string `protobuf:"bytes,1,opt,name=size,proto3" json:"size" validate:"required"`
	Page     string `protobuf:"bytes,2,opt,name=page,proto3" json:"page" validate:"required"`
}

func (m *ListRecordReq) Reset()      { *m = ListRecordReq{} }
func (*ListRecordReq) ProtoMessage() {}
func (*ListRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{9}
}
func (m *ListRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRecordReq.Merge(m, src)
}
func (m *ListRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *ListRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListRecordReq proto.InternalMessageInfo

func (m *ListRecordReq) GetPageSize() string {
	if m != nil {
		return m.PageSize
	}
	return ""
}

func (m *ListRecordReq) GetPage() string {
	if m != nil {
		return m.Page
	}
	return ""
}

type ListRecordRes struct {
	Records []*Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *ListRecordRes) Reset()      { *m = ListRecordRes{} }
func (*ListRecordRes) ProtoMessage() {}
func (*ListRecordRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_db28b008f832a8c4, []int{10}
}
func (m *ListRecordRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRecordRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRecordRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRecordRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRecordRes.Merge(m, src)
}
func (m *ListRecordRes) XXX_Size() int {
	return m.Size()
}
func (m *ListRecordRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRecordRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListRecordRes proto.InternalMessageInfo

func (m *ListRecordRes) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

func init() {
	proto.RegisterType((*Record)(nil), "pb.Record")
	proto.RegisterType((*HealthReq)(nil), "pb.HealthReq")
	proto.RegisterType((*HealthRes)(nil), "pb.HealthRes")
	proto.RegisterType((*ConfigReq)(nil), "pb.ConfigReq")
	proto.RegisterType((*ConfigRes)(nil), "pb.ConfigRes")
	proto.RegisterType((*CreateRecordReq)(nil), "pb.CreateRecordReq")
	proto.RegisterType((*CreateRecordRes)(nil), "pb.CreateRecordRes")
	proto.RegisterType((*GetRecordReq)(nil), "pb.GetRecordReq")
	proto.RegisterType((*GetRecordRes)(nil), "pb.GetRecordRes")
	proto.RegisterType((*ListRecordReq)(nil), "pb.ListRecordReq")
	proto.RegisterType((*ListRecordRes)(nil), "pb.ListRecordRes")
}

func init() { proto.RegisterFile("pkg/pb/rpc.proto", fileDescriptor_db28b008f832a8c4) }

var fileDescriptor_db28b008f832a8c4 = []byte{
	// 825 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcf, 0x8b, 0x1c, 0x45,
	0x14, 0xc7, 0xa7, 0x7a, 0xc6, 0xde, 0x9d, 0x9a, 0x8d, 0x59, 0x2b, 0x26, 0x0e, 0x1d, 0xec, 0x1e,
	0x0a, 0x8c, 0x8b, 0x90, 0xee, 0xcd, 0xaa, 0x04, 0xf6, 0x96, 0x49, 0x60, 0x57, 0x0c, 0xa2, 0xbd,
	0x9b, 0x8b, 0x20, 0x6b, 0xcd, 0x74, 0xa5, 0xa7, 0xd8, 0x99, 0xe9, 0xde, 0xae, 0x6a, 0xc1, 0x3d,
	0x89, 0x47, 0x21, 0x10, 0xf4, 0x0f, 0xd0, 0xa3, 0xf8, 0x37, 0xf8, 0x07, 0x78, 0x92, 0x05, 0x2f,
	0x39, 0x75, 0xdc, 0x5e, 0x0f, 0x32, 0xa7, 0xe0, 0x45, 0x10, 0x04, 0xa9, 0x1f, 0x3d, 0xd3, 0xb3,
	0x0a, 0xba, 0x92, 0xd3, 0xd4, 0x7b, 0xfd, 0x79, 0xdf, 0x79, 0xf5, 0x7e, 0x74, 0xc3, 0xf5, 0xf4,
	0x30, 0x0e, 0xd2, 0x41, 0x90, 0xa5, 0x43, 0x3f, 0xcd, 0x12, 0x91, 0x20, 0x2b, 0x1d, 0x38, 0x1b,
	0x62, 0xc4, 0xb2, 0xe8, 0x20, 0x25, 0x99, 0xf8, 0x34, 0x88, 0x93, 0x24, 0x1e, 0xd3, 0x80, 0xa4,
	0x2c, 0x20, 0xd3, 0x69, 0x22, 0x88, 0x60, 0xc9, 0x94, 0x6b, 0xda, 0xe9, 0x2d, 0x93, 0x71, 0xa2,
	0xdc, 0xea, 0x64, 0x88, 0xd7, 0xeb, 0x04, 0x99, 0x90, 0x63, 0x36, 0x8d, 0x05, 0x19, 0x1f, 0xd2,
	0x2c, 0x20, 0x42, 0x21, 0x06, 0xf4, 0xcc, 0x1f, 0x29, 0x6b, 0x90, 0x3f, 0x0c, 0x04, 0x9b, 0x50,
	0x2e, 0xc8, 0x24, 0xd5, 0x00, 0xfe, 0xde, 0x82, 0x76, 0x48, 0x87, 0x49, 0x16, 0xa1, 0x6b, 0xd0,
	0x62, 0x51, 0x17, 0xf4, 0xc0, 0x46, 0xbb, 0x6f, 0x97, 0x85, 0x67, 0xbd, 0x73, 0x2f, 0xb4, 0x58,
	0x84, 0x6e, 0xc2, 0x15, 0x31, 0xa2, 0x07, 0xd3, 0x7c, 0xd2, 0xb5, 0x7a, 0x60, 0xa3, 0xd9, 0x7f,
	0xb9, 0x2c, 0x3c, 0x7b, 0x7f, 0x44, 0xdf, 0xcb, 0x27, 0xb3, 0xc2, 0xb3, 0x85, 0x3a, 0x85, 0xe6,
	0xb7, 0xc2, 0xb9, 0xc8, 0xba, 0x4d, 0xa5, 0x55, 0xe1, 0x7b, 0x22, 0x33, 0xf8, 0x9e, 0xc8, 0x42,
	0xf3, 0x8b, 0x3e, 0x82, 0x70, 0x98, 0x51, 0x22, 0x68, 0x74, 0x40, 0x44, 0xb7, 0xd5, 0x03, 0x1b,
	0x9d, 0x2d, 0xc7, 0xd7, 0x69, 0xfb, 0x55, 0xda, 0xfe, 0x7e, 0x95, 0x76, 0x1f, 0x97, 0x85, 0xd7,
	0xbe, 0xab, 0x23, 0xee, 0x88, 0x59, 0xe1, 0xb5, 0x87, 0x95, 0xf1, 0xf8, 0xa9, 0x07, 0xbe, 0x79,
	0xea, 0x81, 0x70, 0xe1, 0x92, 0xf2, 0x79, 0x1a, 0x55, 0xf2, 0x2f, 0xfc, 0x37, 0xf9, 0x07, 0x3a,
	0x42, 0xcb, 0xe7, 0x95, 0xb1, 0x90, 0x9f, 0xbb, 0x70, 0x07, 0xb6, 0x77, 0x29, 0x19, 0x8b, 0x51,
	0x48, 0x8f, 0xf0, 0xf5, 0x85, 0xc1, 0xd1, 0x8b, 0xd0, 0x4a, 0x0e, 0x55, 0x35, 0x57, 0x43, 0x2b,
	0x39, 0x94, 0xe4, 0xdd, 0x64, 0xfa, 0x90, 0xc5, 0x92, 0xdc, 0x59, 0x18, 0x1c, 0x5d, 0x83, 0x36,
	0x9d, 0x92, 0xc1, 0x98, 0x1a, 0xda, 0x58, 0x68, 0x1d, 0x36, 0xe7, 0x35, 0x0f, 0xe5, 0x51, 0x7a,
	0xe6, 0x65, 0x0d, 0xe5, 0x11, 0xff, 0x08, 0xe0, 0x65, 0x5d, 0x0c, 0xdd, 0xc4, 0x90, 0x1e, 0xd5,
	0xfb, 0x05, 0x2e, 0xd6, 0x2f, 0xeb, 0xc2, 0xfd, 0x6a, 0x3e, 0xe7, 0x7e, 0xe1, 0x77, 0xcf, 0xdf,
	0x87, 0x23, 0x1f, 0xda, 0x99, 0x32, 0xd4, 0x75, 0x3a, 0x5b, 0xd0, 0x4f, 0x07, 0xbe, 0x7e, 0xdc,
	0x87, 0x32, 0x57, 0x83, 0x1a, 0x6a, 0x7b, 0xf5, 0xbb, 0x3f, 0x1f, 0xdd, 0x68, 0x6e, 0x6d, 0xde,
	0xc2, 0x6f, 0xc3, 0xb5, 0x1d, 0x2a, 0x16, 0x95, 0x79, 0xad, 0x36, 0xe1, 0x57, 0xf5, 0x84, 0xcf,
	0x0a, 0xcf, 0x62, 0xd1, 0x97, 0xbf, 0x3f, 0xba, 0xd1, 0x12, 0x59, 0x4e, 0xe5, 0xc0, 0xe3, 0xdd,
	0xa5, 0xb0, 0xff, 0x9f, 0xc0, 0x26, 0xfe, 0x1a, 0xc0, 0x4b, 0xf7, 0x19, 0xaf, 0xa5, 0xb0, 0x0b,
	0x5b, 0x9c, 0x1d, 0x53, 0x93, 0xc4, 0x5b, 0x65, 0xe1, 0xad, 0xbe, 0x4f, 0x62, 0xba, 0xc7, 0x8e,
	0xe9, 0xac, 0xf0, 0xd4, 0xb3, 0xdf, 0x0a, 0xef, 0xca, 0x27, 0x64, 0xcc, 0xe4, 0x8c, 0x6d, 0xe3,
	0x8c, 0x1e, 0xe5, 0x2c, 0xa3, 0x11, 0xfe, 0x62, 0x9e, 0xa3, 0xa2, 0xd0, 0x3d, 0xd8, 0x4a, 0x49,
	0x4c, 0x4d, 0xd3, 0x36, 0xcb, 0xc2, 0x6b, 0x49, 0x25, 0xa9, 0x22, 0xfd, 0xff, 0xae, 0x22, 0x29,
	0x7c, 0x7f, 0x39, 0x41, 0x8e, 0x6e, 0xc1, 0x15, 0x7d, 0x0d, 0xde, 0x05, 0xbd, 0xe6, 0xb9, 0xdb,
	0x76, 0xca, 0xc2, 0x5b, 0xd1, 0x67, 0x1e, 0x56, 0xdc, 0xe2, 0xbe, 0x5b, 0x7f, 0x58, 0xb0, 0xbd,
	0x93, 0xdc, 0xd1, 0x2f, 0x24, 0x74, 0x1b, 0xda, 0x7a, 0x1f, 0xd0, 0x25, 0xa9, 0x31, 0x5f, 0x14,
	0x67, 0xc9, 0xe4, 0xf8, 0xf2, 0xe7, 0x3f, 0xfd, 0xf2, 0x95, 0xd5, 0x46, 0x2b, 0xc1, 0x48, 0xe3,
	0xb7, 0xa1, 0xad, 0xd7, 0x43, 0x07, 0xce, 0xf7, 0xc6, 0x59, 0x32, 0xeb, 0x81, 0x43, 0x8d, 0x3f,
	0x80, 0x6b, 0xf5, 0xe9, 0x41, 0x57, 0x14, 0xbf, 0xbc, 0x1f, 0xce, 0x3f, 0x38, 0x39, 0xbe, 0xae,
	0xa4, 0xae, 0xe2, 0x8e, 0x7a, 0x27, 0x9b, 0x46, 0x9a, 0x86, 0xa2, 0x0f, 0x60, 0x7b, 0x3e, 0x10,
	0x68, 0x5d, 0x86, 0xd7, 0xc7, 0xca, 0x39, 0xef, 0xe1, 0xb8, 0xa7, 0xd4, 0x1c, 0xb4, 0x5e, 0x53,
	0xe3, 0xc1, 0x36, 0xab, 0x4b, 0xc2, 0x45, 0xdd, 0xd1, 0x4b, 0x52, 0x61, 0x69, 0x50, 0x9c, 0xbf,
	0xb9, 0x38, 0x7e, 0x55, 0xa9, 0xbe, 0x82, 0xd6, 0xea, 0xaa, 0xdb, 0x55, 0x1b, 0xfa, 0x1f, 0x9f,
	0x9c, 0xba, 0x8d, 0x27, 0xa7, 0x6e, 0xe3, 0xd9, 0xa9, 0x0b, 0x3e, 0x2b, 0x5d, 0xf0, 0x6d, 0xe9,
	0x82, 0x1f, 0x4a, 0x17, 0x9c, 0x94, 0x2e, 0xf8, 0xb9, 0x74, 0xc1, 0xaf, 0xa5, 0xdb, 0x78, 0x56,
	0xba, 0xe0, 0xf1, 0x99, 0xdb, 0x38, 0x39, 0x73, 0x1b, 0x4f, 0xce, 0xdc, 0xc6, 0x87, 0x6f, 0xc4,
	0x4c, 0x8c, 0xf2, 0x81, 0x3f, 0x4c, 0x26, 0x81, 0x69, 0xdc, 0xbe, 0xfe, 0x92, 0xc4, 0xc9, 0x4d,
	0xf3, 0x69, 0x09, 0xf4, 0x07, 0x6d, 0x60, 0xab, 0xfd, 0x7e, 0xf3, 0xaf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xa1, 0x31, 0x5c, 0x68, 0xe1, 0x06, 0x00, 0x00,
}

func (this *Record) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Record)
	if !ok {
		that2, ok := that.(Record)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.TheNum != that1.TheNum {
		return false
	}
	if this.TheStr != that1.TheStr {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *HealthReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthReq)
	if !ok {
		that2, ok := that.(HealthReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *HealthRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HealthRes)
	if !ok {
		that2, ok := that.(HealthRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	return true
}
func (this *ConfigReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigReq)
	if !ok {
		that2, ok := that.(ConfigReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ConfigRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigRes)
	if !ok {
		that2, ok := that.(ConfigRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Enable != that1.Enable {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Str != that1.Str {
		return false
	}
	return true
}
func (this *CreateRecordReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRecordReq)
	if !ok {
		that2, ok := that.(CreateRecordReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TheNum != that1.TheNum {
		return false
	}
	if this.TheStr != that1.TheStr {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	return true
}
func (this *CreateRecordRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRecordRes)
	if !ok {
		that2, ok := that.(CreateRecordRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Record.Equal(that1.Record) {
		return false
	}
	return true
}
func (this *GetRecordReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRecordReq)
	if !ok {
		that2, ok := that.(GetRecordReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *GetRecordRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRecordRes)
	if !ok {
		that2, ok := that.(GetRecordRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Record.Equal(that1.Record) {
		return false
	}
	return true
}
func (this *ListRecordReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRecordReq)
	if !ok {
		that2, ok := that.(ListRecordReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *ListRecordRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRecordRes)
	if !ok {
		that2, ok := that.(ListRecordRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Records) != len(that1.Records) {
		return false
	}
	for i := range this.Records {
		if !this.Records[i].Equal(that1.Records[i]) {
			return false
		}
	}
	return true
}
func (this *Record) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.Record{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "TheNum: "+fmt.Sprintf("%#v", this.TheNum)+",\n")
	s = append(s, "TheStr: "+fmt.Sprintf("%#v", this.TheStr)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HealthReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.HealthReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HealthRes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.HealthRes{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.ConfigReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigRes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.ConfigRes{")
	s = append(s, "Enable: "+fmt.Sprintf("%#v", this.Enable)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Str: "+fmt.Sprintf("%#v", this.Str)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateRecordReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CreateRecordReq{")
	s = append(s, "TheNum: "+fmt.Sprintf("%#v", this.TheNum)+",\n")
	s = append(s, "TheStr: "+fmt.Sprintf("%#v", this.TheStr)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateRecordRes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CreateRecordRes{")
	if this.Record != nil {
		s = append(s, "Record: "+fmt.Sprintf("%#v", this.Record)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRecordReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetRecordReq{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRecordRes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetRecordRes{")
	if this.Record != nil {
		s = append(s, "Record: "+fmt.Sprintf("%#v", this.Record)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListRecordReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListRecordReq{")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListRecordRes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListRecordRes{")
	if this.Records != nil {
		s = append(s, "Records: "+fmt.Sprintf("%#v", this.Records)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRpc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GoAmazingClient is the client API for GoAmazing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GoAmazingClient interface {
	// Health check api for k8s.
	Health(ctx context.Context, in *HealthReq, opts ...grpc.CallOption) (*HealthRes, error)
	Config(ctx context.Context, in *ConfigReq, opts ...grpc.CallOption) (*ConfigRes, error)
	CreateRecord(ctx context.Context, in *CreateRecordReq, opts ...grpc.CallOption) (*CreateRecordRes, error)
	GetRecord(ctx context.Context, in *GetRecordReq, opts ...grpc.CallOption) (*GetRecordRes, error)
	ListRecord(ctx context.Context, in *ListRecordReq, opts ...grpc.CallOption) (*ListRecordRes, error)
}

type goAmazingClient struct {
	cc *grpc.ClientConn
}

func NewGoAmazingClient(cc *grpc.ClientConn) GoAmazingClient {
	return &goAmazingClient{cc}
}

func (c *goAmazingClient) Health(ctx context.Context, in *HealthReq, opts ...grpc.CallOption) (*HealthRes, error) {
	out := new(HealthRes)
	err := c.cc.Invoke(ctx, "/pb.GoAmazing/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAmazingClient) Config(ctx context.Context, in *ConfigReq, opts ...grpc.CallOption) (*ConfigRes, error) {
	out := new(ConfigRes)
	err := c.cc.Invoke(ctx, "/pb.GoAmazing/Config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAmazingClient) CreateRecord(ctx context.Context, in *CreateRecordReq, opts ...grpc.CallOption) (*CreateRecordRes, error) {
	out := new(CreateRecordRes)
	err := c.cc.Invoke(ctx, "/pb.GoAmazing/CreateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAmazingClient) GetRecord(ctx context.Context, in *GetRecordReq, opts ...grpc.CallOption) (*GetRecordRes, error) {
	out := new(GetRecordRes)
	err := c.cc.Invoke(ctx, "/pb.GoAmazing/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goAmazingClient) ListRecord(ctx context.Context, in *ListRecordReq, opts ...grpc.CallOption) (*ListRecordRes, error) {
	out := new(ListRecordRes)
	err := c.cc.Invoke(ctx, "/pb.GoAmazing/ListRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoAmazingServer is the server API for GoAmazing service.
type GoAmazingServer interface {
	// Health check api for k8s.
	Health(context.Context, *HealthReq) (*HealthRes, error)
	Config(context.Context, *ConfigReq) (*ConfigRes, error)
	CreateRecord(context.Context, *CreateRecordReq) (*CreateRecordRes, error)
	GetRecord(context.Context, *GetRecordReq) (*GetRecordRes, error)
	ListRecord(context.Context, *ListRecordReq) (*ListRecordRes, error)
}

// UnimplementedGoAmazingServer can be embedded to have forward compatible implementations.
type UnimplementedGoAmazingServer struct {
}

func (*UnimplementedGoAmazingServer) Health(ctx context.Context, req *HealthReq) (*HealthRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (*UnimplementedGoAmazingServer) Config(ctx context.Context, req *ConfigReq) (*ConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (*UnimplementedGoAmazingServer) CreateRecord(ctx context.Context, req *CreateRecordReq) (*CreateRecordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (*UnimplementedGoAmazingServer) GetRecord(ctx context.Context, req *GetRecordReq) (*GetRecordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (*UnimplementedGoAmazingServer) ListRecord(ctx context.Context, req *ListRecordReq) (*ListRecordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecord not implemented")
}

func RegisterGoAmazingServer(s *grpc.Server, srv GoAmazingServer) {
	s.RegisterService(&_GoAmazing_serviceDesc, srv)
}

func _GoAmazing_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAmazingServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoAmazing/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAmazingServer).Health(ctx, req.(*HealthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAmazing_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAmazingServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoAmazing/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAmazingServer).Config(ctx, req.(*ConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAmazing_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAmazingServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoAmazing/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAmazingServer).CreateRecord(ctx, req.(*CreateRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAmazing_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAmazingServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoAmazing/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAmazingServer).GetRecord(ctx, req.(*GetRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoAmazing_ListRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoAmazingServer).ListRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoAmazing/ListRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoAmazingServer).ListRecord(ctx, req.(*ListRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoAmazing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GoAmazing",
	HandlerType: (*GoAmazingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _GoAmazing_Health_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _GoAmazing_Config_Handler,
		},
		{
			MethodName: "CreateRecord",
			Handler:    _GoAmazing_CreateRecord_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _GoAmazing_GetRecord_Handler,
		},
		{
			MethodName: "ListRecord",
			Handler:    _GoAmazing_ListRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/rpc.proto",
}

func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintRpc(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedAt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintRpc(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TheStr) > 0 {
		i -= len(m.TheStr)
		copy(dAtA[i:], m.TheStr)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.TheStr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TheNum != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.TheNum))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HealthReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *HealthRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConfigRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Str) > 0 {
		i -= len(m.Str)
		copy(dAtA[i:], m.Str)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Str)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Num != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x10
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintRpc(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TheStr) > 0 {
		i -= len(m.TheStr)
		copy(dAtA[i:], m.TheStr)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.TheStr)))
		i--
		dAtA[i] = 0x12
	}
	if m.TheNum != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.TheNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateRecordRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRecordRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRecordRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRecordRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRecordRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRecordRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Page) > 0 {
		i -= len(m.Page)
		copy(dAtA[i:], m.Page)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Page)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PageSize) > 0 {
		i -= len(m.PageSize)
		copy(dAtA[i:], m.PageSize)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.PageSize)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListRecordRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRecordRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRecordRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.TheNum != 0 {
		n += 1 + sovRpc(uint64(m.TheNum))
	}
	l = len(m.TheStr)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *HealthReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HealthRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	return n
}

func (m *ConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConfigRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enable {
		n += 2
	}
	if m.Num != 0 {
		n += 1 + sovRpc(uint64(m.Num))
	}
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *CreateRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TheNum != 0 {
		n += 1 + sovRpc(uint64(m.TheNum))
	}
	l = len(m.TheStr)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *CreateRecordRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *GetRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *GetRecordRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *ListRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PageSize)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.Page)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *ListRecordRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func sovRpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Record) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Record{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`TheNum:` + fmt.Sprintf("%v", this.TheNum) + `,`,
		`TheStr:` + fmt.Sprintf("%v", this.TheStr) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HealthReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealthReq{`,
		`}`,
	}, "")
	return s
}
func (this *HealthRes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HealthRes{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigReq{`,
		`}`,
	}, "")
	return s
}
func (this *ConfigRes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigRes{`,
		`Enable:` + fmt.Sprintf("%v", this.Enable) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Str:` + fmt.Sprintf("%v", this.Str) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateRecordReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateRecordReq{`,
		`TheNum:` + fmt.Sprintf("%v", this.TheNum) + `,`,
		`TheStr:` + fmt.Sprintf("%v", this.TheStr) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateRecordRes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateRecordRes{`,
		`Record:` + strings.Replace(this.Record.String(), "Record", "Record", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRecordReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRecordReq{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRecordRes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRecordRes{`,
		`Record:` + strings.Replace(this.Record.String(), "Record", "Record", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRecordReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRecordReq{`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRecordRes) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRecords := "[]*Record{"
	for _, f := range this.Records {
		repeatedStringForRecords += strings.Replace(f.String(), "Record", "Record", 1) + ","
	}
	repeatedStringForRecords += "}"
	s := strings.Join([]string{`&ListRecordRes{`,
		`Records:` + repeatedStringForRecords + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRpc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheNum", wireType)
			}
			m.TheNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TheNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TheStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheNum", wireType)
			}
			m.TheNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TheNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TheStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRecordRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRecordRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRecordRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRecordRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRecordRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRecordRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Page = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRecordRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRecordRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRecordRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &Record{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRpc = fmt.Errorf("proto: unexpected end of group")
)
